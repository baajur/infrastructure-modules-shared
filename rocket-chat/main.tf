locals {
  bucket          = "${var.mongodump.bucket_prefix}-rocket-chat-mongodump"
  mongo_uri       = "mongodb://rocket-chat:${random_password.mongodb_password.result}@rocket-chat-mongodb-headless:27017/rocket-chat-db?replicaSet=rs0"
  mongo_oplog_uri = "mongodb://root:${random_password.mongodb_root_password.result}@rocket-chat-mongodb-headless:27017/local?replicaSet=rs0&authSource=admin"
}

resource "helm_release" "rocket-chat_deployment" {
  name       = "rocket-chat"
  chart      = "stable/rocketchat"
  repository = data.helm_repository.stable.metadata[0].name
  namespace  = var.namespace

  set {
    name  = "image.tag"
    value = var.image_tag
  }

  set {
    name  = "host"
    value = var.host
  }

  set {
    name  = "replicaCount"
    value = "1"
  }

  set {
    name  = "minAvailable"
    value = "1"
  }

  set {
    name  = "mongodb.mongodbPassword"
    value = random_password.mongodb_password.result
  }

  set {
    name  = "mongodb.mongodbRootPassword"
    value = random_password.mongodb_root_password.result
  }

  set {
    name  = "mongodb.mongodbUsername"
    value = "rocket-chat"
  }

  set {
    name  = "mongodb.mongodbDatabase"
    value = "rocket-chat-db"
  }

  set {
    name  = "mongodb.replicaSet.enabled"
    value = "true"
  }

  set {
    name  = "mongodb.replicaSet.replicas.secondary"
    value = "1"
  }

  set {
    name  = "mongodb.replicaSet.pdb.minAvailable.secondary"
    value = "1"
  }

  set {
    name  = "mongodb.replicaSet.replicas.arbiter"
    value = "1"
  }

  set {
    name  = "mongodb.replicaSet.pdb.minAvailable.arbiter"
    value = "1"
  }

  set {
    name  = "ingress.enabled"
    value = "true"
  }

  set {
    name  = "ingress.annotations.kubernetes\\.io/ingress\\.class"
    value = "nginx"
  }

  set {
    name  = "ingress.path"
    value = "/"
  }

  set {
    name  = "externalMongodbUrl"
    value = local.mongo_uri
  }

  set {
    name  = "externalMongodbOplogUrl"
    value = local.mongo_oplog_uri
  }

  set {
    name  = "smtp.enabled"
    value = true
  }

  set {
    name  = "smtp.username"
    value = "SMTP_Injection"
  }

  set {
    name  = "smtp.password"
    value = var.smtp_password
  }

  set {
    name  = "smtp.host"
    value = "smtp.eu.sparkpostmail.com"
  }

  set {
    name  = "smtp.port"
    value = 2525
  }
}

resource "kubernetes_cron_job" "mongodump" {
  metadata {
    name      = "rocket-chat-mongodump"
    namespace = var.namespace

    labels = {
      app = "rocket-chat-mongodump"
    }
  }

  spec {
    concurrency_policy = "Forbid"
    schedule           = var.mongodump.schedule
    job_template {
      metadata {}
      spec {
        backoff_limit = 2
        template {
          metadata {}
          spec {
            container {
              name  = "rocket-chat-mongodump"
              image = var.mongodump.image
              args  = ["/bin/sh", "/tmp/run.sh"]

              volume_mount {
                mount_path = "/tmp/run.sh"
                sub_path   = "run.sh"
                name       = "run-sh-volume"
                read_only  = true
              }
            }

            volume {
              name = "run-sh-volume"

              secret {
                secret_name = kubernetes_secret.mongodump.metadata.0.name

                items {
                  key  = "run.sh"
                  path = "run.sh"
                  mode = "0444"
                }
              }
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_secret" "mongodump" {
  metadata {
    name      = "rocket-chat-mongodump"
    namespace = var.namespace
  }

  data = {
    "run.sh" = data.template_file.run_sh.rendered
  }
}

data "template_file" run_sh {
  template = file("${path.module}/run.sh")

  vars = {
    database_uri = local.mongo_uri

    bucket_url                 = "gs://${local.bucket}"
    bucket_service_account_key = base64decode(google_service_account_key.mongodump.private_key)
  }
}

data "helm_repository" "stable" {
  name = "stable"
  url  = "https://kubernetes-charts.storage.googleapis.com/"
}

resource "random_password" "mongodb_password" {
  length  = 32
  special = false
}

resource "random_password" "mongodb_root_password" {
  length  = 32
  special = false
}

resource "google_storage_bucket" "mongodump" {
  name = local.bucket
}

resource "google_service_account" "mongodump" {
  account_id   = "rocket-chat-mongodbump"
  display_name = "Rocket Chat mongodump - Generated by Terraform"
}

resource "google_service_account_key" "mongodump" {
  service_account_id = google_service_account.mongodump.name
}

resource "google_storage_bucket_iam_member" "mongodump" {
  bucket = google_storage_bucket.mongodump.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.mongodump.email}"
}
